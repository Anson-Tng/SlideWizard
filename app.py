# Name      :   Anson Ting
# File      :   App.py
# Purposes  :   -

import os
from openai import OpenAI
from dotenv import load_dotenv
import TextToSlide


load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

instruction = """You are Slide Wizard, a GPT designed to assist users in creating presentation slides. Your primary function is to help users decide on content and topics for their presentations based on the topic they provide. Your responses will be formatted specifically for easy integration with Python code, adhering to a structured format:

    - Slide Type: Indicated by numbers (1 for title page, 2 for content page, 3 for bullet point page, 4 for thank you slide).
    - Title: Display the slide title as provided.
    - Content: Present the slide content as given, with bullet points for slide type 3. 

    Your output should be in a sequence like '1, title1, content1, 3, title2, content2, 2, title3, content3, 3, title4, content4, 4, title5, content5', where each triplet represents a slide's type, title, and content. Ensure that every presentation includes one title page, one introduction, one outline, one or more content slides, one conclusion, and a final 'thank you' slide. For bullet point slides (type 3), format the content with main and sub-points ( for python to identify main and sub points, please use - for main point, -- for sub point)

    Title page:
    - use slide type 1
    - Title will be short, within 3-10 words
    - keep the content as 'Generated by Slide Wizard'

    Introduction page:
    - use slide type 2
    - If there's bullet points, use type 3
    - Keep the title as 'Introduction'
    - Content can be bullet points or short introduction of the topic (Why this topic, what is this topic means)

    Outline page:
    - use slide type 2
    - If there's bullet points, use type 3
    - Title will always be 'Outline'
    - Content will be bullet points and covered what will be covered later, title of content 1, title of content 2,title of content 3, Conclusion.

    Conclusion page:
    - use slide type 2
    - If there's bullet points, use type 3
    - Title will always be 'Conclusion' or 'Summary' (only one)
    - Content will be about its conclusion or summary, telling what we have just covered and thoughts on it.
    - not too wordy

    Thank you page:
    - use slide type 4

    Please only response like this format:
    1, Topic, Generated by Slide Wizard, 2, Introduction, Content, 3, Outline, - Content, 3, Goals and Objectives, - Increase brand awareness - Generate leads - Drive sales, 3, Competitive Analysis, - Identify competitors - Analyse their strengths and weaknesses, 3, Value Proposition, - Unique selling points - Benefits to customers, 3, Marketing Tactics, - Advertising - Social media - Content marketing, 2, Next Steps, Content Slide, 2, Conclusion, - Allocation of funds for different tactics, 4, thank you, thank you"""

def generate_presentation(topic):
  # Start the chat with the system message to set up the context
  system_message = {"role": "system", "content": instruction}

  user_message = {"role": "user", "content": f"Create a presentation on {topic}."}

  print("Generating content...")
  completion = client.chat.completions.create(
      model="gpt-3.5-turbo",
      messages=[system_message, user_message]
    )

  print("Content generated. Creating slides...")
  # Parse the response into a dataset
  dataset = parse_presentation_data(completion.choices[0].message.content)

    # Create the slides
  createSlide(topic, dataset)

def parse_presentation_data(data_string):
    # Split the data string into individual slide components
    slides = data_string.split(', ')
    dataset = []
    current_slide = None

    for element in slides:
        # Check if the element is a new slide identifier
        if element.isdigit():
            # Add the previous slide to the dataset
            if current_slide:
                dataset.append(tuple(current_slide))

            # Reset the current slide
            current_slide = [int(element), '', '']
        elif current_slide:
            if current_slide[1] == '':  # if title is empty, this is the title
                current_slide[1] = element
            else:
                # Append to the content, adding a newline for better formatting
                current_slide[2] += element + '\n'

    # Add the last slide to the dataset
    if current_slide:
        dataset.append(tuple(current_slide))

    return dataset

def createSlide(fname,dataset):

    fileName = fname + '.pptx'

    for slide_type, header, text in dataset:
        # Convert slide_type to integer if it's a string
        slide_type = int(slide_type)

        if slide_type == 1:
            TextToSlide.slide_intro(header, text)
        elif slide_type == 2:
            TextToSlide.slide_with_text(header, text)
        elif slide_type == 3:
            TextToSlide.slide_with_bullet_point(header, text)
        elif slide_type == 4:
            TextToSlide.slide_thank_you(header, text)
        else:
            print(f"Unknown slide type: {slide_type}")

    TextToSlide.slide_save(fileName)
  
    print("Presentation generated successfully. Check your files.")


if __name__ == "__main__":
    topic = input("Please enter the topic for the presentation: ")
    generate_presentation(topic)